generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name       String? 
  nssNumber   String?  @unique
  signage     String?  // Stores path to admin's signature image (e.g., in Supabase)
  stamp       String?  // Stores path to admin's stamp image (e.g., in Supabase)
  stampHeight Int?     // Stores stamp height for PDF rendering
  stampWidth  Int?     // Stores stamp width for PDF rendering
  sigHeight   Int?     // Stores signature height for PDF rendering
  sigWidth    Int?     // Stores signature width for PDF rendering
  staffId     String?  @unique
  email       String?  @unique
  password    String?
  role        Role     @default(PERSONNEL)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  submissions Submission[]
  documents   Document[]   @relation("SignedDocuments")
  passwordResetTokens PasswordResetToken[]
  OnboardingToken  OnboardingToken []
}

model Submission {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  fullName    String
  nssNumber   String
  gender      Gender
  email       String
  placeOfResidence  String
  phoneNumber      String
  universityAttended   String
  regionOfSchool    String
  yearOfNss         Int
  programStudied    String
  divisionPostedTo  String
  status      SubmissionStatus @default(PENDING)
  postingLetterUrl String
  appointmentLetterUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  user        User     @relation(fields: [userId], references: [id])
  documents   Document[]
  auditLogs   AuditLog[]
  @@unique([userId, nssNumber])
}

model Document {
  id          Int      @id @default(autoincrement())
  submissionId Int
  adminId     Int
  originalUrl String   // URL of the original PDF
  signedUrl   String   // URL of the signed PDF
  documentHash String  // SHA-256 hash of the signed PDF
  signedAt    DateTime @default(now())
  submission  Submission @relation(fields: [submissionId], references: [id])
  admin       User      @relation("SignedDocuments", fields: [adminId], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  submissionId Int
  action      String
  userId      Int?
  details     String?
  createdAt   DateTime @default(now())
  submission  Submission @relation(fields: [submissionId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  deletedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

model OnboardingToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  nssNumber String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  deletedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  PERSONNEL
  STAFF
  ADMIN
}

enum SubmissionStatus {
  PENDING
  PENDING_ENDORSEMENT
  ENDORSED
  REJECTED
  VALIDATED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}