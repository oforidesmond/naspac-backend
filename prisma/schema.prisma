generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  name                String? 
  nssNumber           String?       @unique
  signage             String?  
  stamp               String?      
  stampHeight         Int?    
  stampWidth          Int?   
  sigHeight           Int?    
  sigWidth            Int?   
  staffId             String?       @unique
  email               String?       @unique
  phoneNumber         String?
  tfaSecret           String?
  password            String?
  role                Role          @default(PERSONNEL)
  departmentId        Int?    
  unitId             Int?        
  supervisorId        Int?        
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  submissions         Submission[]
  documents           Document[]    @relation("SignedDocuments")
  passwordResetTokens PasswordResetToken[]
  OnboardingToken     OnboardingToken[]
  department          Department?   @relation("UserDepartment", fields: [departmentId], references: [id])
  unit                Unit?         @relation("UserUnit", fields: [unitId], references: [id])
  supervisor          User?         @relation("SupervisorPersonnel", fields: [supervisorId], references: [id])
  supervisedPersonnel User[]        @relation("SupervisorPersonnel")
  departmentsSupervised Department[] @relation("DepartmentSupervisor")
  templatesCreated    Template[]    @relation("UserTemplates")
  notifications  Notification[] 
}

model Submission {
  id                  Int           @id @default(autoincrement())
  userId              Int           @unique
  fullName            String
  nssNumber           String
  gender              Gender
  email               String
  placeOfResidence    String
  phoneNumber         String
  universityAttended  String
  regionOfSchool      String
  yearOfNss           Int
  programStudied      String
  divisionPostedTo    String
  status              SubmissionStatus @default(PENDING)
  postingLetterUrl    String
  appointmentLetterUrl String
  verificationFormUrl String?
  jobConfirmationLetterUrl String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  user                User          @relation(fields: [userId], references: [id])
  documents           Document[]
  auditLogs           AuditLog[]
  @@unique([userId, nssNumber])
}

model Template {
  id           Int       @id @default(autoincrement())
  name         String  
  type         String   
  fileUrl      String   
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    Int     
  user         User      @relation("UserTemplates", fields: [createdBy], references: [id])
}

model Department {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  supervisorId        Int 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  users               User[]        @relation("UserDepartment")
  units               Unit[]        @relation("DepartmentUnits")
  supervisor          User          @relation("DepartmentSupervisor", fields: [supervisorId], references: [id])
}

model Unit {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  departmentId        Int?      
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  department          Department?   @relation("DepartmentUnits", fields: [departmentId], references: [id])
  users               User[]        @relation("UserUnit")
}

model Document {
  id                  Int           @id @default(autoincrement())
  submissionId        Int
  adminId             Int
  originalUrl         String     
  signedUrl           String     
  documentHash        String     
  signedAt            DateTime      @default(now())
  submission          Submission    @relation(fields: [submissionId], references: [id])
  admin               User          @relation("SignedDocuments", fields: [adminId], references: [id])
}

model AuditLog {
  id                  Int           @id @default(autoincrement())
  submissionId        Int?
  action              String
  userId              Int?
  details             String?
  createdAt           DateTime      @default(now())
  submission          Submission?    @relation(fields: [submissionId], references: [id])
}

model PasswordResetToken {
  id                  Int           @id @default(autoincrement())
  token               String        @unique
  userId              Int
  expiresAt           DateTime
  createdAt           DateTime      @default(now())
  deletedAt           DateTime?
  user                User          @relation(fields: [userId], references: [id])
}

model OnboardingToken {
  id                  Int           @id @default(autoincrement())
  token               String        @unique
  nssNumber           String        @unique
  userId              Int
  expiresAt           DateTime
  used                Boolean       @default(false)
  createdAt           DateTime      @default(now())
  deletedAt           DateTime?
  user                User          @relation(fields: [userId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  timestamp   DateTime  @default(now())
  iconType    IconType
  role        String  
  userId      Int?    
  user        User?     @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  PERSONNEL
  STAFF
  ADMIN
  SUPERVISOR
}

enum SubmissionStatus {
  PENDING
  PENDING_ENDORSEMENT
  ENDORSED
  REJECTED
  VALIDATED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IconType {
  SETTING
  BELL
  USER
}